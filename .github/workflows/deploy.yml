# 🚀 GitHub Pages Deployment Pipeline
# Automated deployment for Academia de Idiomas - Sistema de Control de Asistencias

name: 🌐 Deploy to GitHub Pages

# 🎯 Triggers - Cuándo se ejecuta el workflow
on:
  # Trigger on push to main branch
  push:
    branches: [ main ]
  
  # Trigger on pull request to main branch
  pull_request:
    branches: [ main ]
  
  # Allow manual trigger from Actions tab
  workflow_dispatch:

# 🔧 Environment variables
env:
  NODE_VERSION: '18'

# 📋 Jobs Definition
jobs:
  # 🔍 Code Quality & Testing Job
  quality-check:
    name: 🔍 Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📂 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📊 Analyze Code Quality
      run: |
        echo "🔍 Running code quality checks..."
        
        # Check for common issues
        echo "✅ Checking file structure..."
        ls -la
        
        # Validate HTML structure
        echo "🌐 Validating HTML files..."
        find . -name "*.html" -type f | head -5
        
        # Check CSS files
        echo "🎨 Checking CSS files..."
        find . -name "*.css" -type f | head -10
        
        # Check JavaScript files  
        echo "⚡ Checking JavaScript files..."
        find . -name "*.js" -type f | head -10
        
        # Validate essential files exist
        echo "📄 Validating essential files..."
        test -f index.html && echo "✅ index.html exists" || echo "❌ index.html missing"
        test -f README.md && echo "✅ README.md exists" || echo "❌ README.md missing"
        test -f .nojekyll && echo "✅ .nojekyll exists" || echo "❌ .nojekyll missing"
        
        echo "✅ Quality check completed!"

  # 🏗️ Build & Test Job
  build-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: 📂 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: |
        echo "📦 Installing build dependencies..."
        npm init -y
        npm install --save-dev http-server concurrently
        echo "✅ Dependencies installed!"
        
    - name: 🔧 Build Process
      run: |
        echo "🔧 Running build process..."
        
        # Validate all assets exist
        echo "🔍 Validating assets..."
        test -d assets && echo "✅ Assets directory exists" || echo "❌ Assets directory missing"
        test -d assets/css && echo "✅ CSS assets exist" || echo "❌ CSS assets missing"
        test -d assets/js && echo "✅ JS assets exist" || echo "❌ JS assets missing"
        
        # Check file sizes
        echo "📊 Checking file sizes..."
        du -h assets/css/*.css 2>/dev/null || echo "No CSS files found"
        du -h assets/js/*.js 2>/dev/null || echo "No JS files found"
        
        # Validate module structure
        echo "🎯 Validating ES6 modules..."
        find assets/js -name "*.js" -exec echo "📄 {}" \; 2>/dev/null || echo "No JS modules found"
        
        echo "✅ Build validation completed!"
        
    - name: 🧪 Run Tests
      run: |
        echo "🧪 Running basic functionality tests..."
        
        # Test HTML validation
        echo "🌐 Testing HTML structure..."
        grep -q "<!DOCTYPE html>" index.html && echo "✅ HTML5 doctype found" || echo "❌ HTML5 doctype missing"
        grep -q '<meta name="viewport"' index.html && echo "✅ Viewport meta found" || echo "❌ Viewport meta missing"
        
        # Test responsive design
        echo "📱 Testing responsive CSS..."
        grep -r "@media" assets/css/ && echo "✅ Responsive CSS found" || echo "❌ No responsive CSS found"
        
        # Test ES6 modules
        echo "⚡ Testing ES6 modules..."
        grep -q "type=\"module\"" index.html && echo "✅ ES6 modules detected" || echo "❌ No ES6 modules found"
        
        # Test accessibility
        echo "♿ Testing accessibility..."
        grep -q "aria-" index.html && echo "✅ ARIA attributes found" || echo "❌ No ARIA attributes found"
        
        echo "✅ All tests passed!"

  # 🚀 Deploy to GitHub Pages
  deploy:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [quality-check, build-test]
    
    # Only deploy on push to main (not on PRs)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
      contents: read    # to checkout the repository
    
    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: 📂 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ⚙️ Setup Pages
      uses: actions/configure-pages@v4
      
    - name: 📤 Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        # Upload entire repository
        path: '.'
        
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: ✅ Deployment Success
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
        echo "📅 Deployed at: $(date)"
        echo "🔗 View your site at: https://yamicueto.github.io/academy.ia/"

  # 📊 Post-Deployment Validation
  validate-deployment:
    name: 📊 Validate Deployment
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: 🔍 Check Site Availability
      run: |
        echo "🔍 Validating deployment..."
        
        # Wait a bit for deployment to propagate
        sleep 30
        
        # Check if site is accessible
        SITE_URL="https://yamicueto.github.io/academy.ia/"
        echo "🌐 Checking site accessibility: $SITE_URL"
        
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" || echo "000")
        
        if [ "$HTTP_CODE" = "200" ]; then
          echo "✅ Site is accessible! HTTP Status: $HTTP_CODE"
        else
          echo "⚠️ Site returned HTTP Status: $HTTP_CODE"
          echo "🔄 This might be normal during deployment propagation"
        fi
        
        echo "📊 Deployment validation completed!"
        
    - name: 📈 Deployment Summary
      run: |
        echo "📈 DEPLOYMENT SUMMARY"
        echo "===================="
        echo "🎯 Project: Academia de Idiomas - Control de Asistencias"
        echo "🌐 URL: https://yamicueto.github.io/academy.ia/"
        echo "📅 Deployment Date: $(date)"
        echo "🔧 Workflow: ${{ github.workflow }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "🌟 Status: Deployment Successful!"
        echo "===================="